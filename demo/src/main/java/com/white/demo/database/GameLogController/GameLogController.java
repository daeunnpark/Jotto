package com.white.demo.database.GameLogController;

import com.white.demo.database.GameController.GameController;
import com.white.demo.database.LoginController.LoginController;
import com.white.demo.database.Repositories.GameLogRepository;

import com.white.demo.database.model.Game;
import com.white.demo.database.model.GameLog;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.ui.Model;
import com.white.demo.database.GameController.GameController;
import org.springframework.web.servlet.ModelAndView;
import java.util.ArrayList;
import org.json.simple.JSONObject;


import java.util.Date;

import org.json.*;
import org.json.simple.JSONObject;

import java.util.List;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/log") // This means URL's start with /demo (after Application path)
public class GameLogController {
    @Autowired // This means to get the bean called userRepository





    // Which is auto-generated by Spring, we will use it to handle the data

    private GameLogRepository logRepository;

    Date d = new Date();

    public static int logCount = 0;



    @GetMapping(path="/addGameLog") // Map ONLY GET Requests
    public @ResponseBody String addNewGameLog (@RequestParam String username, @RequestParam int game_ID,
                                               @RequestParam String word, @RequestParam int letterCount) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request


        GameLog l = new GameLog();
        l.setUsername(username);
        l.setGame_ID(game_ID);
        l.setDate(d.toGMTString());
        l.setWord(word);
        l.setLetterCount(letterCount);
        this.logRepository.save(l);
        return "LogCount : " + logCount++;

    }

    @GetMapping(path="/saveGameLog") // Map ONLY GET Requests
    public @ResponseBody String addNewGameLog (@RequestParam GameLog logData) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Date d = new Date();
        logData.setDate(d.toGMTString());
        logData.setGame_ID(GameController.gamecount);
        this.logRepository.save(logData);

        return "saved";

    }

    @RequestMapping(value = "/history", method = RequestMethod.GET)
    public @ResponseBody ModelAndView showAll(@RequestParam int game_ID) {
        ArrayList<GameLog> gl = new ArrayList<GameLog>();
        for (GameLog g : logRepository.findAll()){
            if (g.getGame_ID() == game_ID){
                gl.add(g);
            }
        }
        ArrayList<String> userWords = new ArrayList<String>();
        ArrayList<String> computerWords = new ArrayList<String>();
        ArrayList<Integer> userCounts = new ArrayList<Integer>();
        ArrayList<Integer> computerCounts = new ArrayList<Integer>();



        for (GameLog g : gl){
            if (g.getUsername().equals("computer")){
                computerWords.add(g.getWord());
                computerCounts.add(g.getCount());
            }
            else {
                userWords.add(g.getWord());
                userCounts.add(g.getCount());
            }
        }

        String winner = "";
        String time = "";
        String userWord = "";
        String computerWord = "";
        GameController gc = new GameController();


        for (Game g : gc.getAllGame()){
            if (g.getGame_ID() == game_ID){
                winner = g.getWinner();
                time = g.getDate();
                userWord = g.getUserWord();
                computerWord = g.getComputerWord();
                break;
            }
        }



        JSONObject obj = new JSONObject();
        obj.put("username", LoginController.name);
        obj.put("time", time);
        obj.put("userWord", userWord);
        obj.put("userWords", userWords);
        obj.put("userCount", userCounts);
        obj.put("computerWord", computerWord);
        obj.put("computerWords", computerWords);
        obj.put("computerCount", computerCounts);
        obj.put("winnder", winner);

        ModelAndView mv =  new ModelAndView("history");


        mv.addObject("logs", obj);


        return mv;



    }









    @GetMapping(path="/allGameLog")
    public @ResponseBody Iterable<GameLog> getAllGameLog() {
        // This returns a JSON or XML with the users
        return logRepository.findAll();
    }




}
